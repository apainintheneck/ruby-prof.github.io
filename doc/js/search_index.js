var search_data = {"index":{"searchIndex":["rack","rubyprof","rackprofiler","rubyprof","abstractprinter","callinfo","callinfoprinter","callinfovisitor","callstackprinter","calltreeprinter","cmd","dotprinter","flatprinter","graphhtmlprinter","graphprinter","measurement","methodinfo","multiprinter","profile","profiletask","thread","<=>()","application()","arguments()","base64_image()","base_name()","call()","call_info_report()","called()","called()","calltree_name()","children_time()","children_time()","clean_output_directory()","color()","convert()","create_link()","create_output_directory()","define()","determine_event_specification_and_value_scale()","dot_report()","dump()","exclude_method!()","exclude_threads()","exclude_threads=()","expansion()","fiber_id()","file()","file_link()","file_name_for_thread()","file_path_for_thread()","flat_report()","full_name()","graph_html_report()","graph_link()","graph_report()","id()","link()","max_requests_reached?()","measure_mode()","measure_mode()","measure_mode=()","method_href()","method_href()","methods()","min_depth()","min_percent()","name()","needs_dir?()","needs_dir?()","new()","new()","new()","new()","new()","new()","new()","new()","open_asset()","output_directory()","path()","pause()","pause()","pause()","paused?()","print()","print()","print()","print()","print()","print()","print!()","print_commands()","print_css()","print_footer()","print_header()","print_headers()","print_help()","print_java_script()","print_method()","print_stack()","print_thread()","print_threads()","print_title_bar()","print_to_call_info()","print_to_dot()","print_to_flat()","print_to_graph()","print_to_graph_html()","print_to_stack()","print_to_tree()","profile()","profile()","profile()","remove_subsidiary_files_from_previous_profile_runs()","resume()","resume()","resume()","root_methods()","run_script()","running?()","running?()","self_time()","self_time()","setup_options()","sort_method()","sort_method()","stack_report()","start()","start()","stop()","stop()","sum()","template()","threads()","threshold()","time_format()","title()","total_time()","total_time()","total_time()","total_time()","track_allocations?()","tree_report()","validate_print_params()","validate_print_params()","visit()","wait_time()","wait_time()","wait_time()","license","readme"],"longSearchIndex":["rack","rack::rubyprof","rack::rubyprof::rackprofiler","rubyprof","rubyprof::abstractprinter","rubyprof::callinfo","rubyprof::callinfoprinter","rubyprof::callinfovisitor","rubyprof::callstackprinter","rubyprof::calltreeprinter","rubyprof::cmd","rubyprof::dotprinter","rubyprof::flatprinter","rubyprof::graphhtmlprinter","rubyprof::graphprinter","rubyprof::measurement","rubyprof::methodinfo","rubyprof::multiprinter","rubyprof::profile","rubyprof::profiletask","rubyprof::thread","rubyprof::callinfo#<=>()","rubyprof::callstackprinter#application()","rubyprof::callstackprinter#arguments()","rubyprof::callstackprinter#base64_image()","rubyprof::calltreeprinter#base_name()","rack::rubyprof#call()","rubyprof::multiprinter#call_info_report()","rubyprof::callinfo#called()","rubyprof::methodinfo#called()","rubyprof::calltreeprinter#calltree_name()","rubyprof::callinfo#children_time()","rubyprof::methodinfo#children_time()","rubyprof::profiletask#clean_output_directory()","rubyprof::callstackprinter#color()","rubyprof::calltreeprinter#convert()","rubyprof::graphhtmlprinter#create_link()","rubyprof::profiletask#create_output_directory()","rubyprof::profiletask#define()","rubyprof::calltreeprinter#determine_event_specification_and_value_scale()","rubyprof::multiprinter#dot_report()","rubyprof::callstackprinter#dump()","rubyprof::profile#exclude_method!()","rubyprof::exclude_threads()","rubyprof::exclude_threads=()","rubyprof::callstackprinter#expansion()","rubyprof::thread#fiber_id()","rubyprof::calltreeprinter#file()","rubyprof::graphhtmlprinter#file_link()","rubyprof::calltreeprinter#file_name_for_thread()","rubyprof::calltreeprinter#file_path_for_thread()","rubyprof::multiprinter#flat_report()","rubyprof::methodinfo#full_name()","rubyprof::multiprinter#graph_html_report()","rubyprof::callstackprinter#graph_link()","rubyprof::multiprinter#graph_report()","rubyprof::thread#id()","rubyprof::callstackprinter#link()","rack::rubyprof::rackprofiler#max_requests_reached?()","rubyprof::measure_mode()","rubyprof::profile#measure_mode()","rubyprof::measure_mode=()","rubyprof::callstackprinter#method_href()","rubyprof::graphhtmlprinter#method_href()","rubyprof::thread#methods()","rubyprof::methodinfo#min_depth()","rubyprof::abstractprinter#min_percent()","rubyprof::callstackprinter#name()","rubyprof::calltreeprinter::needs_dir?()","rubyprof::multiprinter::needs_dir?()","rack::rubyprof::new()","rack::rubyprof::rackprofiler::new()","rubyprof::abstractprinter::new()","rubyprof::callinfovisitor::new()","rubyprof::dotprinter::new()","rubyprof::multiprinter::new()","rubyprof::profile::new()","rubyprof::profiletask::new()","rubyprof::callstackprinter#open_asset()","rubyprof::profiletask#output_directory()","rubyprof::calltreeprinter#path()","rack::rubyprof::rackprofiler#pause()","rubyprof::pause()","rubyprof::profile#pause()","rubyprof::profile#paused?()","rubyprof::abstractprinter#print()","rubyprof::callstackprinter#print()","rubyprof::calltreeprinter#print()","rubyprof::dotprinter#print()","rubyprof::graphhtmlprinter#print()","rubyprof::multiprinter#print()","rack::rubyprof::rackprofiler#print!()","rubyprof::callstackprinter#print_commands()","rubyprof::callstackprinter#print_css()","rubyprof::callstackprinter#print_footer()","rubyprof::callstackprinter#print_header()","rubyprof::calltreeprinter#print_headers()","rubyprof::callstackprinter#print_help()","rubyprof::callstackprinter#print_java_script()","rubyprof::calltreeprinter#print_method()","rubyprof::callstackprinter#print_stack()","rubyprof::calltreeprinter#print_thread()","rubyprof::calltreeprinter#print_threads()","rubyprof::callstackprinter#print_title_bar()","rubyprof::multiprinter#print_to_call_info()","rubyprof::multiprinter#print_to_dot()","rubyprof::multiprinter#print_to_flat()","rubyprof::multiprinter#print_to_graph()","rubyprof::multiprinter#print_to_graph_html()","rubyprof::multiprinter#print_to_stack()","rubyprof::multiprinter#print_to_tree()","rubyprof::profile()","rubyprof::profile::profile()","rubyprof::profile#profile()","rubyprof::calltreeprinter#remove_subsidiary_files_from_previous_profile_runs()","rack::rubyprof::rackprofiler#resume()","rubyprof::resume()","rubyprof::profile#resume()","rubyprof::thread#root_methods()","rubyprof::profiletask#run_script()","rubyprof::running?()","rubyprof::profile#running?()","rubyprof::callinfo#self_time()","rubyprof::methodinfo#self_time()","rubyprof::graphhtmlprinter#setup_options()","rubyprof::abstractprinter#sort_method()","rubyprof::flatprinter#sort_method()","rubyprof::multiprinter#stack_report()","rubyprof::start()","rubyprof::profile#start()","rubyprof::stop()","rubyprof::profile#stop()","rubyprof::callstackprinter#sum()","rubyprof::graphhtmlprinter#template()","rubyprof::profile#threads()","rubyprof::callstackprinter#threshold()","rubyprof::abstractprinter#time_format()","rubyprof::callstackprinter#title()","rubyprof::callinfo#total_time()","rubyprof::callstackprinter#total_time()","rubyprof::methodinfo#total_time()","rubyprof::thread#total_time()","rubyprof::profile#track_allocations?()","rubyprof::multiprinter#tree_report()","rubyprof::calltreeprinter#validate_print_params()","rubyprof::multiprinter#validate_print_params()","rubyprof::callinfovisitor#visit()","rubyprof::callinfo#wait_time()","rubyprof::methodinfo#wait_time()","rubyprof::thread#wait_time()","",""],"info":[["Rack","","Rack.html","",""],["Rack::RubyProf","","Rack/RubyProf.html","",""],["Rack::RubyProf::RackProfiler","","Rack/RubyProf/RackProfiler.html","",""],["RubyProf","","RubyProf.html","","<p>These methods are deprecated and are available for backwards compatability.\n"],["RubyProf::AbstractPrinter","","RubyProf/AbstractPrinter.html","","<p>This is the base class for all Printers. It is never used directly.\n"],["RubyProf::CallInfo","","RubyProf/CallInfo.html","","<p>The CallInfo class is used to track the relationships between methods. It is a helper class used by  …\n"],["RubyProf::CallInfoPrinter","","RubyProf/CallInfoPrinter.html","","<p>Prints out the call graph based on CallInfo instances. This is mainly for debugging purposes as it provides …\n"],["RubyProf::CallInfoVisitor","","RubyProf/CallInfoVisitor.html","","<p>The call info visitor class does a depth-first traversal across a list of method infos. At each call_info …\n"],["RubyProf::CallStackPrinter","","RubyProf/CallStackPrinter.html","","<p>Prints a HTML visualization of the call tree.\n<p>To use the printer:\n\n<pre>result = RubyProf.profile do\n  [code ...</pre>\n"],["RubyProf::CallTreePrinter","","RubyProf/CallTreePrinter.html","","<p>Generates profiling information in callgrind format for use by kcachegrind and similar tools.\n"],["RubyProf::Cmd","","RubyProf/Cmd.html","","<p>Synopsis\n<p>Profiles a Ruby program.\n<p>Usage\n"],["RubyProf::DotPrinter","","RubyProf/DotPrinter.html","","<p>Generates a graphviz graph in dot format.\n<p>To use the dot printer:\n\n<pre>result = RubyProf.profile do\n  [code ...</pre>\n"],["RubyProf::FlatPrinter","","RubyProf/FlatPrinter.html","","<p>Generates flat profile reports as text. To use the flat printer:\n\n<pre>result = RubyProf.profile do\n  [code ...</pre>\n"],["RubyProf::GraphHtmlPrinter","","RubyProf/GraphHtmlPrinter.html","","<p>Generates graph profile reports as html. To use the graph html printer:\n\n<pre>result = RubyProf.profile do\n ...</pre>\n"],["RubyProf::GraphPrinter","","RubyProf/GraphPrinter.html","","<p>Generates graph profile reports as text. To use the graph printer:\n\n<pre>result = RubyProf.profile do\n  [code ...</pre>\n"],["RubyProf::Measurement","","RubyProf/Measurement.html","","<p>The Measurement class is a helper class used by RubyProf::MethodInfo to store information about the method. …\n"],["RubyProf::MethodInfo","","RubyProf/MethodInfo.html","","<p>The MethodInfo class is used to track information about each method that is profiled. You cannot create …\n"],["RubyProf::MultiPrinter","","RubyProf/MultiPrinter.html","","<p>Helper class to simplify printing profiles of several types from one profiling run. Currently prints …\n"],["RubyProf::Profile","","RubyProf/Profile.html","","<p>The Profile class represents a single profiling run and provides the main API for using ruby-prof. After …\n"],["RubyProf::ProfileTask","","RubyProf/ProfileTask.html","","<p>Define a task library for profiling unit tests with ruby-prof.\n<p>All of the options provided by the Rake:TestTask …\n"],["RubyProf::Thread","","RubyProf/Thread.html","","<p>The Thread class contains profile results for a single fiber (note a Ruby thread can run multiple fibers). …\n"],["<=>","RubyProf::CallInfo","RubyProf/CallInfo.html#method-i-3C-3D-3E","(other)","<p>Compares two CallInfo instances. The comparison is based on the CallInfo#parent, CallInfo#target, and …\n"],["application","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-application","()",""],["arguments","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-arguments","()",""],["base64_image","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-base64_image","()",""],["base_name","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-base_name","()",""],["call","Rack::RubyProf","Rack/RubyProf.html#method-i-call","(env)",""],["call_info_report","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-call_info_report","()","<p>the name of the callinfo profile file\n"],["called","RubyProf::CallInfo","RubyProf/CallInfo.html#method-i-called","()","<p>The number of times the parent method called the target method\n"],["called","RubyProf::MethodInfo","RubyProf/MethodInfo.html#method-i-called","()","<p>The number of times this method was called\n"],["calltree_name","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-calltree_name","(method_info)",""],["children_time","RubyProf::CallInfo","RubyProf/CallInfo.html#method-i-children_time","()","<p>The time spent in child methods resulting from the parent method calling the target method\n"],["children_time","RubyProf::MethodInfo","RubyProf/MethodInfo.html#method-i-children_time","()","<p>The time this method&#39;s children took to execute\n"],["clean_output_directory","RubyProf::ProfileTask","RubyProf/ProfileTask.html#method-i-clean_output_directory","()",""],["color","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-color","(p)",""],["convert","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-convert","(value)",""],["create_link","RubyProf::GraphHtmlPrinter","RubyProf/GraphHtmlPrinter.html#method-i-create_link","(thread, overall_time, method)","<p>Creates a link to a method.  Note that we do not create links to methods which are under the min_perecent …\n"],["create_output_directory","RubyProf::ProfileTask","RubyProf/ProfileTask.html#method-i-create_output_directory","()",""],["define","RubyProf::ProfileTask","RubyProf/ProfileTask.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["determine_event_specification_and_value_scale","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-determine_event_specification_and_value_scale","()",""],["dot_report","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-dot_report","()","<p>the name of the call stack profile file\n"],["dump","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-dump","(ci)",""],["exclude_method!","RubyProf::Profile","RubyProf/Profile.html#method-i-exclude_method-21","(p1, p2)","<p>Excludes the method from profiling results.\n"],["exclude_threads","RubyProf","RubyProf.html#method-c-exclude_threads","()","<p>Returns the threads that ruby-prof should exclude from profiling\n"],["exclude_threads=","RubyProf","RubyProf.html#method-c-exclude_threads-3D","(value)","<p>Specifies which threads ruby-prof should exclude from profiling\n"],["expansion","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-expansion","()",""],["fiber_id","RubyProf::Thread","RubyProf/Thread.html#method-i-fiber_id","()","<p>Returns the fiber id of this thread.\n"],["file","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-file","(method)",""],["file_link","RubyProf::GraphHtmlPrinter","RubyProf/GraphHtmlPrinter.html#method-i-file_link","(path, linenum)",""],["file_name_for_thread","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-file_name_for_thread","(thread)",""],["file_path_for_thread","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-file_path_for_thread","(thread)",""],["flat_report","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-flat_report","()","<p>the name of the flat profile file\n"],["full_name","RubyProf::MethodInfo","RubyProf/MethodInfo.html#method-i-full_name","()","<p>Returns the full name of a class. The interpretation of method names is:\n<p>MyObject#test - An method defined …\n"],["graph_html_report","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-graph_html_report","()",""],["graph_link","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-graph_link","(call_info)",""],["graph_report","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-graph_report","()","<p>the name of the graph profile file\n"],["id","RubyProf::Thread","RubyProf/Thread.html#method-i-id","()","<p>Returns the thread id of this thread.\n"],["link","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-link","(call_info)",""],["max_requests_reached?","Rack::RubyProf::RackProfiler","Rack/RubyProf/RackProfiler.html#method-i-max_requests_reached-3F","()",""],["measure_mode","RubyProf","RubyProf.html#method-c-measure_mode","()","<p>Returns what ruby-prof is measuring.  Valid values include:\n<p>RubyProf::WALL_TIME\n<p>RubyProf::PROCESS_TIME …\n"],["measure_mode","RubyProf::Profile","RubyProf/Profile.html#method-i-measure_mode","()","<p>Returns the measure mode used in this profile.\n"],["measure_mode=","RubyProf","RubyProf.html#method-c-measure_mode-3D","(value)","<p>Specifies what ruby-prof should measure.  Valid values include:\n<p>RubyProf::WALL_TIME - Wall time measures …\n"],["method_href","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-method_href","(method)",""],["method_href","RubyProf::GraphHtmlPrinter","RubyProf/GraphHtmlPrinter.html#method-i-method_href","(thread, method)",""],["methods","RubyProf::Thread","RubyProf/Thread.html#method-i-methods","()","<p>Returns an array of methods that were called from this thread during program execution.\n"],["min_depth","RubyProf::MethodInfo","RubyProf/MethodInfo.html#method-i-min_depth","()","<p>The min call depth of this method\n"],["min_percent","RubyProf::AbstractPrinter","RubyProf/AbstractPrinter.html#method-i-min_percent","()","<p>Returns the min_percent of total time a method must take to be included in a profiling report\n"],["name","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-name","(call_info)",""],["needs_dir?","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-c-needs_dir-3F","()",""],["needs_dir?","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-c-needs_dir-3F","()",""],["new","Rack::RubyProf","Rack/RubyProf.html#method-c-new","(app, options = {})",""],["new","Rack::RubyProf::RackProfiler","Rack/RubyProf/RackProfiler.html#method-c-new","(options)",""],["new","RubyProf::AbstractPrinter","RubyProf/AbstractPrinter.html#method-c-new","(result)","<p>Create a new printer.\n<p>result should be the output generated from a profiling run\n"],["new","RubyProf::CallInfoVisitor","RubyProf/CallInfoVisitor.html#method-c-new","(root_methods)",""],["new","RubyProf::DotPrinter","RubyProf/DotPrinter.html#method-c-new","(result)","<p>Creates the DotPrinter using a RubyProf::Proile.\n"],["new","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-c-new","(result, printers = [:flat, :graph_html])",""],["new","RubyProf::Profile","RubyProf/Profile.html#method-c-new","(p1 = v1, p2 = v2)","<p>Returns a new profiler. Possible options for the options hash are:\n<p>measure_mode &mdash; Measure mode. Specifies …\n"],["new","RubyProf::ProfileTask","RubyProf/ProfileTask.html#method-c-new","(name = :profile)",""],["open_asset","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-open_asset","(file)",""],["output_directory","RubyProf::ProfileTask","RubyProf/ProfileTask.html#method-i-output_directory","()",""],["path","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-path","()",""],["pause","Rack::RubyProf::RackProfiler","Rack/RubyProf/RackProfiler.html#method-i-pause","()",""],["pause","RubyProf","RubyProf.html#method-c-pause","()","<p>Pauses profiling\n"],["pause","RubyProf::Profile","RubyProf/Profile.html#method-i-pause","()","<p>Pauses collecting profile data.\n"],["paused?","RubyProf::Profile","RubyProf/Profile.html#method-i-paused-3F","()","<p>Returns whether a profile is currently paused.\n"],["print","RubyProf::AbstractPrinter","RubyProf/AbstractPrinter.html#method-i-print","(output = STDOUT, options = {})","<p>Prints a report to the provided output.\n<p>output - Any IO object, including STDOUT or a file. The default …\n"],["print","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-print","(output = STDOUT, options = {})","<p>Specify print options.\n<p>options - Hash table\n\n<pre>:min_percent - Number 0 to 100 that specifes the minimum\n  ...</pre>\n"],["print","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-print","(options = {})",""],["print","RubyProf::DotPrinter","RubyProf/DotPrinter.html#method-i-print","(output = STDOUT, options = {})","<p>Print a graph report to the provided output.\n<p>output - Any IO object, including STDOUT or a file. The default …\n"],["print","RubyProf::GraphHtmlPrinter","RubyProf/GraphHtmlPrinter.html#method-i-print","(output = STDOUT, options = {})",""],["print","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-print","(options)","<p>create profile files under options or the current directory. options is used as the base name for the …\n"],["print!","Rack::RubyProf::RackProfiler","Rack/RubyProf/RackProfiler.html#method-i-print-21","(prefix = nil)",""],["print_commands","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-print_commands","()",""],["print_css","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-print_css","()",""],["print_footer","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-print_footer","()",""],["print_header","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-print_header","()",""],["print_headers","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-print_headers","(output, thread)",""],["print_help","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-print_help","()",""],["print_java_script","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-print_java_script","()",""],["print_method","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-print_method","(output, method)",""],["print_stack","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-print_stack","(visited, call_info, parent_time)",""],["print_thread","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-print_thread","(thread)",""],["print_threads","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-print_threads","()",""],["print_title_bar","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-print_title_bar","()",""],["print_to_call_info","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-print_to_call_info","(options)",""],["print_to_dot","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-print_to_dot","(options)",""],["print_to_flat","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-print_to_flat","(options)",""],["print_to_graph","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-print_to_graph","(options)",""],["print_to_graph_html","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-print_to_graph_html","(options)",""],["print_to_stack","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-print_to_stack","(options)",""],["print_to_tree","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-print_to_tree","(options)",""],["profile","RubyProf","RubyProf.html#method-c-profile","(options = {}, &block)","<p>Profiles a block\n"],["profile","RubyProf::Profile","RubyProf/Profile.html#method-c-profile","(*args)","<p>Profiles the specified block and returns a RubyProf::Profile object. Arguments are passed to Profile …\n"],["profile","RubyProf::Profile","RubyProf/Profile.html#method-i-profile","()","<p>Profiles the specified block.\n\n<pre>profile = RubyProf::Profile.new\nprofile.profile do\n  ..\nend</pre>\n"],["remove_subsidiary_files_from_previous_profile_runs","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-remove_subsidiary_files_from_previous_profile_runs","()",""],["resume","Rack::RubyProf::RackProfiler","Rack/RubyProf/RackProfiler.html#method-i-resume","()",""],["resume","RubyProf","RubyProf.html#method-c-resume","()","<p>Resume profiling\n"],["resume","RubyProf::Profile","RubyProf/Profile.html#method-i-resume","()","<p>Resumes recording profile data.\n"],["root_methods","RubyProf::Thread","RubyProf/Thread.html#method-i-root_methods","()","<p>Returns the root methods (ie, methods that were not called by other methods) that were profiled while …\n"],["run_script","RubyProf::ProfileTask","RubyProf/ProfileTask.html#method-i-run_script","(script_path)","<p>Run script\n"],["running?","RubyProf","RubyProf.html#method-c-running-3F","()","<p>Is a profile running?\n"],["running?","RubyProf::Profile","RubyProf/Profile.html#method-i-running-3F","()","<p>Returns whether a profile is currently running.\n"],["self_time","RubyProf::CallInfo","RubyProf/CallInfo.html#method-i-self_time","()","<p>The self time (of the parent) resulting from the parent method calling the target method\n"],["self_time","RubyProf::MethodInfo","RubyProf/MethodInfo.html#method-i-self_time","()","<p>The time this method took to execute\n"],["setup_options","RubyProf::GraphHtmlPrinter","RubyProf/GraphHtmlPrinter.html#method-i-setup_options","(options)",""],["sort_method","RubyProf::AbstractPrinter","RubyProf/AbstractPrinter.html#method-i-sort_method","()","<p>Returns how profile data should be sorted\n"],["sort_method","RubyProf::FlatPrinter","RubyProf/FlatPrinter.html#method-i-sort_method","()","<p>Override for this printer to sort by self time by default\n"],["stack_report","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-stack_report","()","<p>the name of the call stack profile file\n"],["start","RubyProf","RubyProf.html#method-c-start","()","<p>Starts profiling\n"],["start","RubyProf::Profile","RubyProf/Profile.html#method-i-start","()","<p>Starts recording profile data.\n"],["stop","RubyProf","RubyProf.html#method-c-stop","()","<p>Stops profiling\n"],["stop","RubyProf::Profile","RubyProf/Profile.html#method-i-stop","()","<p>Stops collecting profile data.\n"],["sum","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-sum","(a)",""],["template","RubyProf::GraphHtmlPrinter","RubyProf/GraphHtmlPrinter.html#method-i-template","()",""],["threads","RubyProf::Profile","RubyProf/Profile.html#method-i-threads","()","<p>Returns an array of RubyProf::Thread instances that were profiled.\n"],["threshold","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-threshold","()",""],["time_format","RubyProf::AbstractPrinter","RubyProf/AbstractPrinter.html#method-i-time_format","()","<p>Returns the time format used to show when a profile was run\n"],["title","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-title","()",""],["total_time","RubyProf::CallInfo","RubyProf/CallInfo.html#method-i-total_time","()","<p>The total time resulting from the parent method calling the target method\n"],["total_time","RubyProf::CallStackPrinter","RubyProf/CallStackPrinter.html#method-i-total_time","(call_infos)",""],["total_time","RubyProf::MethodInfo","RubyProf/MethodInfo.html#method-i-total_time","()","<p>The total time this method took - includes self time + wait time + child time\n"],["total_time","RubyProf::Thread","RubyProf/Thread.html#method-i-total_time","()","<p>Returns the total time this thread was executed.\n"],["track_allocations?","RubyProf::Profile","RubyProf/Profile.html#method-i-track_allocations-3F","()","<p>Returns if object allocations were tracked in this profile.\n"],["tree_report","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-tree_report","()","<p>the name of the callgrind profile file\n"],["validate_print_params","RubyProf::CallTreePrinter","RubyProf/CallTreePrinter.html#method-i-validate_print_params","(options)",""],["validate_print_params","RubyProf::MultiPrinter","RubyProf/MultiPrinter.html#method-i-validate_print_params","(options)",""],["visit","RubyProf::CallInfoVisitor","RubyProf/CallInfoVisitor.html#method-i-visit","(&block)",""],["wait_time","RubyProf::CallInfo","RubyProf/CallInfo.html#method-i-wait_time","()","<p>The wait time (of the parent) resulting from the parent method calling the target method\n"],["wait_time","RubyProf::MethodInfo","RubyProf/MethodInfo.html#method-i-wait_time","()","<p>The time this method waited for other fibers/threads to execute\n"],["wait_time","RubyProf::Thread","RubyProf/Thread.html#method-i-wait_time","()","<p>Returns the amount of time this thread waited while other thread executed.\n"],["LICENSE","","LICENSE.html","","<p>Copyright (C) 2005 - 2014 Shugo Maeda &lt;shugo@ruby-lang.org&gt; and Charlie Savage &lt;cfis@savagexi.com&gt; …\n"],["README","","README_rdoc.html","","<p>ruby-prof\n<p><img src=\"https://travis-ci.org/ruby-prof/ruby-prof.png?branch=master\" alt=\"Build Status\" /> …\n"]]}}